from rest_framework.test import APITestCase
from rest_framework import status
from django.urls import reverse

# Create your tests here.
class TestRouteFindingView(APITestCase):
    def setUp(self):
        # routes = [
        #     ["Quirino", "Pedro Gil"],
        #     ["Pedro Gil", "Quirino"],
        #     ["Libertad", "R. Papa"],
        #     ["Balintawak", "United Nations"],
        #     ["EDSA", "Anonas"],
        #     ["Katipunan", "United Nations"],
        #     ["Doroteo Jose", "Gilmore"],
        #     ["Recto", "Gil Puyat"],
        #     ["J. Ruiz", "Doroteo Jose"],
        #     ["Vito Cruz", "Recto"],
        #     ["Recto", "Doroteo Jose"],
        #     ["Doroteo Jose", "Recto"],
        #     ["Katipunan", "Anonas"],
        #     ["Santolan2", "Marikina"],
        #     ["Pureza", "Betty Go-Belmonte"],
        #     ["Araneta-Cubao", "Legarda"],
        #     ["V. Mapa", "Taft"],
        #     ["North Avenue", "Katipunan"],
        #     ["Araneta-Cubao", "Ortigas"],
        #     ["Cubao", "Recto"],
        #     ["Gilmore", "Cubao"],
        #     ["Shaw Blvd.", "Araneta-Cubao"],
        #     ["Kamuning", "Quezon Avenue"],
        #     ["Guadalupe", "Buendia"],
        #     ["Santolan3", "Magallanes"],
        #     ["Boni", "Taft"],
        #     ["Ayala", "Blumentritt"],
        #     ["Baclaran", "Ortigas"],
        #     ["Cubao", "Abad Santos"],
        #     ["Doroteo Jose", "North Avenue"],
        #     ["Buendia", "Doroteo Jose"],
        #     ["Tayuman", "Cubao"],
        #     ["Doroteo Jose", "Cubao"],
        #     ["Baclaran", "Roosevelt"],
        #     ["Recto", "Antipolo"],
        #     ["North Avenue", "Taft"]
        # ]
        routes = [
            [15, 14],
            [14, 15],
            [18, 5],
            [2, 13],
            [19, 29],
            [30, 13],
            [10, 26],
            [21, 17],
            [25, 10],
            [16, 21],
            [21, 10],
            [10, 21],
            [30, 29],
            [31, 32],
            [23, 27],
            [28, 22],
            [24, 46],
            [34, 30],
            [28, 39],
            [37, 21],
            [26, 37],
            [40, 28],
            [36, 35],
            [42, 43],
            [38, 45],
            [41, 46],
            [44, 7],
            [20, 39],
            [37, 6],
            [10, 34],
            [43, 10],
            [8, 37],
            [10, 37],
            [20, 1],
            [21, 33],
            [34, 46]
        ]


        self.urls = [reverse('route-finding', kwargs={"src": line[0], "dest": line[1]}) for line in routes]

    def test_route_finding(self):
        # answer = [
        #     {'path': [('Quirino', 'Pedro Gil', 1)], 'cost': [14]},
        #     {'path': [('Pedro Gil', 'Quirino', 1)], 'cost': [14]},
        #     {'path': [('Libertad', 'R. Papa', 13)], 'cost': [26]},
        #     {'path': [('Balintawak', 'United Nations', 11)], 'cost': [26]},
        #     {'path': [('EDSA', 'Doroteo Jose', 9), ('Recto', 'Anonas', 8)], 'cost': [23, 25]},
        #     {'path': [('Katipunan', 'Recto', 9), ('Doroteo Jose', 'United Nations', 3)], 'cost': [26, 16]},
        #     {'path': [('Doroteo Jose', 'Doroteo Jose', 0), ('Recto', 'Gilmore', 5)], 'cost': [0, 21]},
        #     {'path': [('Recto', 'Recto', 0), ('Doroteo Jose', 'Gil Puyat', 7)], 'cost': [0, 21]},
        #     {'path': [('J. Ruiz', 'Recto', 4), ('Doroteo Jose', 'Doroteo Jose', 0)], 'cost': [19, 0]},
        #     {'path': [('Vito Cruz', 'Doroteo Jose', 6), ('Recto', 'Recto', 0)], 'cost': [19, 0]},
        #     {'path': [('Recto', 'Recto', 0), ('Doroteo Jose', 'Doroteo Jose', 0)], 'cost': [0, 0]},
        #     {'path': [('Doroteo Jose', 'Doroteo Jose', 0), ('Recto', 'Recto', 0)], 'cost': [0, 0]},
        #     {'path': [('Katipunan', 'Anonas', 1)], 'cost': [13]},
        #     {'path': [('Santolan2', 'Marikina', 1)], 'cost': [15]},
        #     {'path': [('Pureza', 'Betty Go-Belmonte', 4)], 'cost': [19]},
        #     {'path': [('Araneta-Cubao', 'Legarda', 6)], 'cost': [22]},
        #     {'path': [('V. Mapa', 'Araneta-Cubao', 4), ('Cubao', 'Taft', 9)], 'cost': [20, 24]},
        #     {'path': [('North Avenue', 'Cubao', 3), ('Araneta-Cubao', 'Katipunan', 2)], 'cost': [16, 16]},
        #     {'path': [('Araneta-Cubao', 'Araneta-Cubao', 0), ('Cubao', 'Ortigas', 2)], 'cost': [0, 13]},
        #     {'path': [('Cubao', 'Cubao', 0), ('Araneta-Cubao', 'Recto', 7)], 'cost': [0, 23]},
        #     {'path': [('Gilmore', 'Araneta-Cubao', 2), ('Cubao', 'Cubao', 0)], 'cost': [16, 0]},
        #     {'path': [('Shaw Blvd.', 'Cubao', 3), ('Araneta-Cubao', 'Araneta-Cubao', 0)], 'cost': [16, 0]},
        #     {'path': [('Kamuning', 'Quezon Avenue', 1)], 'cost': [13]},
        #     {'path': [('Guadalupe', 'Buendia', 1)], 'cost': [13]},
        #     {'path': [('Santolan3', 'Magallanes', 7)], 'cost': [20]},
        #     {'path': [('Boni', 'Taft', 5)], 'cost': [20]},
        #     {'path': [('Ayala', 'Taft', 2), ('EDSA', 'Blumentritt', 12)], 'cost': [13, 25]},
        #     {'path': [('Baclaran', 'Doroteo Jose', 10), ('Recto', 'Araneta-Cubao', 7), ('Cubao', 'Ortigas', 2)], 'cost': [23, 23, 13]},
        #     {'path': [('Cubao', 'Cubao', 0), ('Araneta-Cubao', 'Recto', 7), ('Doroteo Jose', 'Abad Santos', 4)], 'cost': [0, 23, 17]},
        #     {'path': [('Doroteo Jose', 'Doroteo Jose', 0), ('Recto', 'Araneta-Cubao', 7), ('Cubao', 'North Avenue', 3)], 'cost': [0, 23, 16]},
        #     {'path': [('Buendia', 'Taft', 3), ('EDSA', 'Doroteo Jose', 9)], 'cost': [16, 23]},
        #     {'path': [('Tayuman', 'Doroteo Jose', 2), ('Recto', 'Araneta-Cubao', 7), ('Cubao', 'Cubao', 0)], 'cost': [15, 23, 0]},
        #     {'path': [('Doroteo Jose', 'Doroteo Jose', 0), ('Recto', 'Araneta-Cubao', 7), ('Cubao', 'Cubao', 0)], 'cost': [0, 23, 0]},
        #     {'path': [('Baclaran', 'Roosevelt', 19)], 'cost': [35]},
        #     {'path': [('Recto', 'Antipolo', 12)], 'cost': [33]},
        #     {'path': [('North Avenue', 'Taft', 12)], 'cost': [28]},
        # ]
        answer = [
            {'path': [(15, 14, 1)], 'cost': [14]},
            {'path': [(14, 15, 1)], 'cost': [14]},
            {'path': [(18, 5, 13)], 'cost': [26]},
            {'path': [(2, 13, 11)], 'cost': [26]},
            {'path': [(19, 10, 9), (21, 29, 8)], 'cost': [23, 25]},
            {'path': [(30, 21, 9), (10, 13, 3)], 'cost': [26, 16]},
            {'path': [(10, 10, 0), (21, 26, 5)], 'cost': [0, 21]},
            {'path': [(21, 21, 0), (10, 17, 7)], 'cost': [0, 21]},
            {'path': [(25, 21, 4), (10, 10, 0)], 'cost': [19, 0]},
            {'path': [(16, 10, 6), (21, 21, 0)], 'cost': [19, 0]},
            {'path': [(21, 21, 0), (10, 10, 0)], 'cost': [0, 0]},
            {'path': [(10, 10, 0), (21, 21, 0)], 'cost': [0, 0]},
            {'path': [(30, 29, 1)], 'cost': [13]},
            {'path': [(31, 32, 1)], 'cost': [15]},
            {'path': [(23, 27, 4)], 'cost': [19]},
            {'path': [(28, 22, 6)], 'cost': [22]},
            {'path': [(24, 28, 4), (37, 46, 9)], 'cost': [20, 24]},
            {'path': [(34, 37, 3), (28, 30, 2)], 'cost': [16, 16]},
            {'path': [(28, 28, 0), (37, 39, 2)], 'cost': [0, 13]},
            {'path': [(37, 37, 0), (28, 21, 7)], 'cost': [0, 23]},
            {'path': [(26, 28, 2), (37, 37, 0)], 'cost': [16, 0]},
            {'path': [(40, 37, 3), (28, 28, 0)], 'cost': [16, 0]},
            {'path': [(36, 35, 1)], 'cost': [13]},
            {'path': [(42, 43, 1)], 'cost': [13]},
            {'path': [(38, 45, 7)], 'cost': [20]},
            {'path': [(41, 46, 5)], 'cost': [20]},
            {'path': [(44, 46, 2), (19, 7, 12)], 'cost': [13, 25]},
            {'path': [(20, 19, 1), (46, 39, 7)], 'cost': [14, 20]},
            {'path': [(37, 37, 0), (28, 21, 7), (10, 6, 4)], 'cost': [0, 23, 17]},
            {'path': [(10, 10, 0), (21, 28, 7), (37, 34, 3)], 'cost': [0, 23, 16]},
            {'path': [(43, 46, 3), (19, 10, 9)], 'cost': [16, 23]},
            {'path': [(8, 10, 2), (21, 28, 7), (37, 37, 0)], 'cost': [15, 23, 0]},
            {'path': [(10, 10, 0), (21, 28, 7), (37, 37, 0)], 'cost': [0, 23, 0]},
            {'path': [(20, 1, 19)], 'cost': [35]},
            {'path': [(21, 33, 12)], 'cost': [33]},
            {'path': [(34, 46, 12)], 'cost': [28]},
        ]

        for i in range(len(self.urls)):
            res = self.client.get(self.urls[i])

            self.assertEqual(res.status_code, status.HTTP_200_OK)
            self.assertEqual(res.data["path"], answer[i]["path"])
            self.assertEqual(res.data["cost"], answer[i]["cost"])